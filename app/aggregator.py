import asyncio
import logging
from typing import Any

from app.constants.settings import WRITE_INTERVAL
from app.writer_pinnacle import write_to_storage as write_pinnacle
from app.writer_analyzer import write_analyzer_to_storage as write_analyzer


logger = logging.getLogger(__name__)


class Aggregator:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–æ–∫–µ—Ç–æ–≤ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ë–î.
    """

    def __init__(self, flush_interval: int = WRITE_INTERVAL):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞.

        :param flush_interval: –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–±—Ä–æ—Å–∞ –±—É—Ñ–µ—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.buffer: list[dict[str, Any]] = []
        self.lock = asyncio.Lock()
        self.flush_interval = flush_interval

    async def add(self, message: dict[str, Any]):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä.

        :param message: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç —Å–æ–∫–µ—Ç–∞
        """
        async with self.lock:
            self.buffer.append(message)

    async def run_flush_loop(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å–±—Ä–æ—Å–∞ –±—É—Ñ–µ—Ä–∞.
        """
        while True:
            await asyncio.sleep(self.flush_interval)
            await self.flush()

    async def flush(self):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –æ—á–∏—â–∞–µ—Ç –±—É—Ñ–µ—Ä.
        """
        async with self.lock:
            if not self.buffer:
                logger.info('üì≠ –ë—É—Ñ–µ—Ä –ø—É—Å—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å')
                return

            # logger.info(f'üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(self.buffer)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É')

            # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º –ø—Ä–∏–ª–µ—Ç–∞—é—Ç
            for i, message in enumerate(self.buffer[:4]):
                logger.info(f'üîπ –°–æ–æ–±—â–µ–Ω–∏–µ #{i+1}:\n{message}\n')

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            pinnacle_msgs = [msg for msg in self.buffer if
                             msg.get('Source') == 'Pinnacle']
            analyzer_msgs = [
                msg for msg in self.buffer
                if isinstance(msg, dict)
                and 'first' in msg and 'second' in msg and 'outcome' in msg
            ]

            if pinnacle_msgs:
                logger.info(
                    f'üì¶ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(pinnacle_msgs)} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Pinnacle')
                await write_pinnacle(pinnacle_msgs)

            if analyzer_msgs:
                logger.info(
                    f'üß† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(analyzer_msgs)} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Analyzer')
                await write_analyzer(analyzer_msgs)

            self.buffer.clear()
