import asyncio
import logging
import os
import zipfile
from datetime import datetime, timedelta
from pathlib import Path

from app.constants.paths import EXPORT_PINNACLE_DIR, EXPORT_ANALYZER_DIR, ARCHIVE_DIR
from app.constants.settings import ARCHIVE_AGE_THRESHOLD, ARCHIVE_INTERVAL


logger = logging.getLogger(__name__)


def zip_and_cleanup_yesterdays_exports():
    """
    –ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ CSV-—Ñ–∞–π–ª—ã –∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.
    –°–æ–∑–¥–∞—ë—Ç ZIP-—Ñ–∞–π–ª —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –µ–≥–æ –≤ –ø–∞–ø–∫—É –∞—Ä—Ö–∏–≤–æ–≤.
    """
    threshold_time = datetime.utcnow() - timedelta(hours=ARCHIVE_AGE_THRESHOLD)
    timestamp_str = datetime.utcnow().strftime('%Y-%m-%d_%H-%M-%S')

    for source_dir in [EXPORT_PINNACLE_DIR, EXPORT_ANALYZER_DIR]:
        source_path = Path(source_dir)
        source_name = source_path.name

        files_to_archive = [
            file_path for file_path in source_path.glob('*.csv')
            if datetime.utcfromtimestamp(file_path.stat().st_mtime) < threshold_time
        ]

        if not files_to_archive:
            logger.info(
                f'üìÅ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ä—à–µ {ARCHIVE_AGE_THRESHOLD} —á–∞—Å–æ–≤ –≤ {source_name}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º')
            continue

        archive_name = f'{source_name}_{timestamp_str}.zip'
        archive_path = Path(ARCHIVE_DIR) / archive_name

        with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for file_path in files_to_archive:
                zipf.write(file_path, arcname=file_path.name)
                logger.info(f'‚ûï –î–æ–±–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤: {file_path.name}')

        for file_path in files_to_archive:
            try:
                os.remove(file_path)
                logger.info(f'üóëÔ∏è –£–¥–∞–ª—ë–Ω: {file_path.name}')
            except Exception as e:
                logger.warning(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file_path.name}: {e}')

        logger.info(f'‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {archive_path}')


async def run_archiver_loop():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö CSV-—Ñ–∞–π–ª–æ–≤.
    """
    while True:
        logger.info('üì¶ –ó–∞–ø—É—â–µ–Ω –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä—ã—Ö CSV-—Ñ–∞–π–ª–æ–≤...')
        zip_and_cleanup_yesterdays_exports()
        await asyncio.sleep(ARCHIVE_INTERVAL)
