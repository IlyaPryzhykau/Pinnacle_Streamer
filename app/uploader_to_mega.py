import asyncio
import logging
import os
from pathlib import Path

from mega import Mega
from app.constants.paths import ARCHIVE_DIR
from app.config import settings
from app.constants.settings import MEGA_UPLOAD_INTERVAL_SECONDS

logger = logging.getLogger(__name__)


def upload_archives_to_mega():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç ZIP-–∞—Ä—Ö–∏–≤—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ARCHIVE_DIR –≤ –æ–±–ª–∞–∫–æ Mega.
    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —É–¥–∞–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã.
    """
    logger.info('üîê –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Mega...')
    mega = Mega()
    try:
        m = mega.login(settings.mega_email, settings.mega_password)
    except Exception as e:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ Mega: {e}')
        return

    archive_dir = Path(ARCHIVE_DIR)
    zip_files = list(archive_dir.glob('*.zip'))

    if not zip_files:
        logger.info('üìÇ –ù–µ—Ç –∞—Ä—Ö–∏–≤–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏')
        return

    for file_path in zip_files:
        try:
            logger.info(f'üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º: {file_path.name}')
            m.upload(file_path)
            os.remove(file_path)
            logger.info(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ: {file_path.name}')
        except Exception as e:
            logger.warning(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {file_path.name}: {e}')


async def run_mega_uploader_loop():
    """
    –¶–∏–∫–ª–∏—á–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞—Ä—Ö–∏–≤–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –Ω–∞ Mega
    —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º MEGA_UPLOAD_INTERVAL_SECONDS.
    """
    while True:
        logger.info('üöö –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–æ–≤ –Ω–∞ Mega...')
        upload_archives_to_mega()
        await asyncio.sleep(MEGA_UPLOAD_INTERVAL_SECONDS)
